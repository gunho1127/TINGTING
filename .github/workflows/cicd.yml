name: CI/CD - TingTing to EC2

on:
  push:
    branches: [ "main" ]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/tingting-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}        # repo secret
          password: ${{ secrets.DOCKERHUB_TOKEN }}           # repo secret
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short
      - uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: SSH deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}                      # env secret
          username: ${{ secrets.EC2_USER }}                  # env secret
          key: ${{ secrets.EC2_SSH_KEY }}                    # env secret
          script: |
            set -e
            APP_DIR=/tingting
            mkdir -p $APP_DIR
            cd $APP_DIR

            # compose.yaml 생성/유지
            if [ ! -f compose.yaml ]; then
              cat > compose.yaml <<'YAML'
services:
  backend:
    image: ${REGISTRY_IMAGE}:${TAG}
    container_name: tingting-backend
    ports:
      - "8080:8080"
    env_file:
      - .env
    restart: always
YAML
            fi

            # .env 존재 체크
            if [ ! -f .env ]; then
              echo "ERROR: .env not found on EC2. Create it with secrets before deploying." >&2
              exit 1
            fi

            # 이미지 태그 갱신
            if grep -q '^REGISTRY_IMAGE=' .env; then
              sed -i "s|^REGISTRY_IMAGE=.*|REGISTRY_IMAGE=${{ env.IMAGE_NAME }}|" .env
            else
              echo "REGISTRY_IMAGE=${{ env.IMAGE_NAME }}" >> .env
            fi
            if grep -q '^TAG=' .env; then
              sed -i "s|^TAG=.*|TAG=latest|" .env
            else
              echo "TAG=latest" >> .env
            fi

            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker compose pull
            docker compose up -d
            docker image prune -f
            docker compose ps
