name: CI/CD - TingTing to EC2

on:
  push:
    branches: [ "main" ]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/tingting-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 커밋 short SHA를 환경변수로 저장
      - name: Set SHORT_SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Extract meta (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ env.SHORT_SHA }}
            type=sha,format=short

      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          # build job에서 만든 SHORT_SHA를 그대로 넘겨줍니다.
          envs: SHORT_SHA
          script: |
            set -euo pipefail
            APP_DIR=/tingting
            cd "$APP_DIR"

            # .env 존재 확인
            if [ ! -f .env ]; then
              echo "ERROR: .env not found on EC2 at $APP_DIR/.env" >&2
              exit 1
            fi

            # .env의 레지스트리/태그 갱신 (이미지 이름/태그를 명시적으로 고정)
            if grep -q '^REGISTRY_IMAGE=' .env; then
              sed -i "s|^REGISTRY_IMAGE=.*|REGISTRY_IMAGE=${{ env.IMAGE_NAME }}|" .env
            else
              echo "REGISTRY_IMAGE=${{ env.IMAGE_NAME }}" >> .env
            fi

            if grep -q '^TAG=' .env; then
              sed -i "s|^TAG=.*|TAG=${SHORT_SHA}|" .env
            else
              echo "TAG=${SHORT_SHA}" >> .env
            fi

            # 최신 이미지 pull & 강제 재생성으로 재시작
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            docker compose pull
            docker compose up -d --force-recreate --remove-orphans
            docker image prune -f
            docker compose ps
